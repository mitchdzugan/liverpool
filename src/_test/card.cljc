(ns -test.card
  (:require #?(:clj [clojure.test :refer :all]
               :cljs [cljs.test :refer-macros [is deftest testing]])
            [allpa.core :as a]
            [card :as c]))

(deftest cards
  (testing "joker?"
    (is (= (c/joker? (c/->Suited :hearts 1))
           false))
    (is (= (c/joker? (c/->NoCard))
           false))
    (is (= (c/joker? (c/->Joker :red))
           true)))
  (testing "no-card?"
    (is (= (c/no-card? (c/->Suited :hearts 1))
           false))
    (is (= (c/no-card? (c/->NoCard))
           true))
    (is (= (c/no-card? (c/->Joker :red))
           false)))
  (testing "from-int"
    (is (= (c/from-int -1)
           (c/->NoCard)))
    (is (= (c/from-int nil)
           (c/->NoCard)))
    (is (= (c/from-int 0)
           (c/->Suited :diamonds 0)))
    (is (= (c/from-int 13)
           (c/->Suited :hearts 0)))
    (is (= (c/from-int 26)
           (c/->Suited :spades 0)))
    (is (= (c/from-int 39)
           (c/->Suited :clubs 0)))
    (is (= (c/from-int 42)
           (c/->Suited :clubs 3)))
    (is (= (c/from-int 54)
           (c/->Suited :diamonds 0)))
    (is (= (c/from-int 52)
           (c/->Joker :red)))
    (is (= (c/from-int 53)
           (c/->Joker :black))))
  (testing "to-points"
    (is (= (c/to-points (c/->NoCard))
           0))
    (is (= (c/to-points (c/->Suited :diamonds 0))
           20))
    (is (= (c/to-points (c/->Suited :hearts 1))
           5))
    (is (= (c/to-points (c/->Suited :spades 0))
           20))
    (is (= (c/to-points (c/->Suited :clubs 10))
           10))
    (is (= (c/to-points (c/->Suited :clubs 3))
           5))
    (is (= (c/to-points (c/->Joker :red))
           50))
    (is (= (c/to-points (c/->Joker :black))
           50))))
